# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import gc.generated.gcdebug_pb2 as gcdebug__pb2


class DebugAPIStub(object):
  """//////////////////////////
  //////////////////////////
  //////////////////////////
  ////     API       ///////
  //////////////////////////
  //////////////////////////
  //////////////////////////

  This service describes the Debug API used for debugging
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetFullState = channel.unary_unary(
        '/gc.DebugAPI/GetFullState',
        request_serializer=gcdebug__pb2.GetFullStateReq.SerializeToString,
        response_deserializer=gcdebug__pb2.GetFullStateResp.FromString,
        )


class DebugAPIServicer(object):
  """//////////////////////////
  //////////////////////////
  //////////////////////////
  ////     API       ///////
  //////////////////////////
  //////////////////////////
  //////////////////////////

  This service describes the Debug API used for debugging
  """

  def GetFullState(self, request, context):
    # missing associated documentation comment in .proto file
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_DebugAPIServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetFullState': grpc.unary_unary_rpc_method_handler(
          servicer.GetFullState,
          request_deserializer=gcdebug__pb2.GetFullStateReq.FromString,
          response_serializer=gcdebug__pb2.GetFullStateResp.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'gc.DebugAPI', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
