[metadata]
name = gc
description = Quantum Resistant Ledger Node
author = The Quantum Resistant Ledger Team
author-email = info@thegc.org
license = MIT
url = https://thegc.org
long-description = README.pypi

platforms = any
# Add here all kinds of additional classifiers as defined under
# https://pypi.python.org/pypi?%3Aaction=list_classifiers
classifiers =
    Development Status :: 4 - Beta
    Programming Language :: Python
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.5

[options]
zip_safe = False
packages = find:
include_package_data = True
package_dir =
    =src
# Add here dependencies of your project (semicolon-separated), e.g.
# install_requires = numpy; scipy
install_requires =
    setuptools==46.4.0
    plyvel==1.2.0
    ntplib==0.3.4
    Twisted>=19.7.0
    colorlog==3.1.0
    simplejson==3.11.1
    PyYAML==5.3.1
    grpcio-tools>=1.9.0,<=1.27.2
    grpcio>=1.9.0,<=1.27.2
    google-api-python-client==1.8.3
    service_identity==17.0.0
    protobuf==3.6.0
    pyopenssl==17.5.0
    six==1.11
    click==6.7
    pygclib>=0.99.3,<1.1.0
    pyqryptonight>=0.99.3,<1.1.0
    pyqrandomx>=0.0.0,<1.0.0
    Flask>=1.0.0
    json-rpc==1.10.8
    cryptography==2.3
    mock==2.0.0
    daemonize==2.4.7

# Add here test requirements (semicolon-separated)
tests_require =
    pytest==3.6
    pytest-cov==2.5.1
    pytest-xdist==1.22.2
    pytest-flake8==1.0.0
    flake8==3.5.0
    autoflake==1.1
    timeout-decorator==0.4.0
    nose==1.3.7

[versioneer]
VCS = git
style = pep440
versionfile_source = src/gc/_version.py
versionfile_build = gc/_version.py
tag_prefix = v

[options.packages.find]
where = src
exclude =
    tests

[options.extras_require]
# Add here additional requirements for extra features, to install with:
# `pip install demo[PDF]` like:
# PDF = ReportLab; RXP

[test]
# py.test options when running `python setup.py test`
addopts = tests src/gc

[nosetests]
exclude = "test_integration/*"

[tool:pytest]
# Options for py.test:
# Specify command line options as you would do when invoking py.test directly.
# e.g. --cov-report html (or xml) for html/xml output or --junitxml junit.xml
# in order to write a coverage file that can be read by Jenkins.
addopts =
    --cov src/gc --cov-report term-missing --cov-report xml
    --doctest-modules -s
    --flake8
    --verbose

norecursedirs =
    dist
    build
    .tox

flake8-max-line-length = 160
flake8-ignore = N801 N802 N803 N805 N806
flake8-exclude = src/gc/generated,tests_integration,src/gc/crypto/doctest_data.py

[aliases]
release = sdist bdist_wheel upload
docs = build_sphinx

[bdist_wheel]
# Use this option if your package is pure-python
universal = 0

[build_sphinx]
source_dir = docs
build_dir = docs/_build

[devpi:upload]
# Options for the devpi: PyPI server and packaging tool
# VCS export must be deactivated since we are using setuptools-scm
no-vcs = 1
formats = bdist_wheel

[flake8]
max-line-length = 160
ignore = N801 N802 N803 N805 N806 E126
exclude =
    .tox
    build
    dist
    .eggs
    docs/conf.py
    src/gc/generated
    tests_integration
    src/gc/crypto/doctest_data.py

[pep8]
max-line-length = 160
exclude = ./src/gc/generated,./tests_integration,./src/gc/crypto/doctest_data.py

[pycodestyle]
# Warning Version has been temporarily added, until the
# issue with latest version of pycodestyle is resovled
version = 2.3.1
max-line-length = 160
exclude = ./src/gc/generated,./tests_integration,./src/gc/crypto/doctest_data.py,./docs

[pyscaffold]
# PyScaffold's parameters when the project was created.
# This will be used when updating. Do not change!
version = 3.0.2
package = gc
